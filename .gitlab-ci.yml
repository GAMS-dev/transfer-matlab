
stages:
  - images
  - lint
  - doc
  - download
  - octave:build
  - octave:test
  - matlab:build
  - matlab:test
  - package
  - deploy

variables:
    GIT_SUBMODULE_STRATEGY: recursive
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gams_transfer_matlab/${CI_COMMIT_TAG}/"

image_linux:
    stage: images
    tags:
        - linux
    image:
        name: docker:20.10
    services:
        - docker:20.10-dind
    variables:
        DOCKER_TLS_CERTDIR: "/certs"
    before_script:
        - mkdir -p $HOME/.docker
        - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
    script:
        - sed -i "s/_matlab_username_/$MATLAB_USERNAME/g" images/linux/runmatlab.sh
        - sed -i "s/_matlab_password_/$MATLAB_PASSWORD/g" images/linux/runmatlab.sh
        - docker build -t linux/builder images/linux
        - docker tag linux/builder $CI_REGISTRY_IMAGE/linux/builder:latest
        - docker push $CI_REGISTRY_IMAGE/linux/builder:latest
    rules:
        - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
          changes:
            - images/linux/Dockerfile
          when: manual
          allow_failure: true

lint:
    stage: lint
    tags:
        - windows-shell
    script:
        - matlab.exe -batch "addpath('test'); code_issues('exit_on_fail', true)"
    only:
        - merge_requests
        - master
        - tags

doc:build:
    stage: doc
    tags:
        - linux
    image:
        name: $CI_REGISTRY_IMAGE/linux/builder
    script:
        - mkdir -p build
        - doxygen doc/Doxyfile
    only:
        - merge_requests
        - master
        - tags
    artifacts:
        name: doc
        paths:
            - build/doc/html
        expire_in: 30 min

download:linux:
    stage: download
    tags:
        - linux
    image:
        name: $CI_REGISTRY_IMAGE/linux/builder
    script:
        - mkdir -p linux/gdx
        - curl -o gdx.zip $URL_GDX_LINUX
        - unzip gdx.zip -d linux/gdx
    only:
        - merge_requests
        - master
        - tags
    artifacts:
        name: linux:gdx
        paths:
            - linux/gdx
        expire_in: 30 min

download:macos:
    stage: download
    tags:
        - macos
    script:
        - mkdir -p macos/gdx
        - curl -o gdx.zip $URL_GDX_MACOS
        - tar -xf gdx.zip -C macos/gdx
    only:
        - merge_requests
        - master
        - tags
    artifacts:
        name: macos:gdx
        paths:
            - macos/gdx
        expire_in: 30 min

download:macos_arm:
    stage: download
    tags:
        - macos-arm64
    script:
        - mkdir -p macos_arm/gdx
        - curl -o gdx.zip $URL_GDX_MACOS_ARM
        - tar -xf gdx.zip -C macos_arm/gdx
    only:
        - merge_requests
        - master
        - tags
    artifacts:
        name: macos_arm:gdx
        paths:
            - macos_arm/gdx
        expire_in: 30 min

download:windows:
    stage: download
    tags:
        - windows-shell
    script:
        - mkdir -p windows/gdx
        - curl -o gdx.zip $URL_GDX_WINDOWS
        - tar -xf gdx.zip -C windows/gdx
    only:
        - merge_requests
        - master
        - tags
    artifacts:
        name: windows:gdx
        paths:
            - windows/gdx
        expire_in: 30 min

octave:build:linux:
    stage: octave:build
    tags:
        - linux
    image:
        name: $CI_REGISTRY_IMAGE/linux/builder
    needs: [download:linux]
    script:
        - mkdir -p linux/octave
        - cp -r +gams linux/octave
        - cd linux/octave
        - octave --no-gui --no-window-system --eval "gams.transfer.setup('../../ext/gdx', '../../ext/zlib', 'verbose', $BUILD_VERBOSITY)"
        - nm -o `find -name "*mex"` | grep -F GLIBC_2. | grep -v -F 2.2.5 | grep -v -F 2.3.4
    only:
        - merge_requests
        - master
    artifacts:
        name: linux:octave
        paths:
            - linux/octave/+gams
        expire_in: 30 min

octave:build:macos:
    stage: octave:build
    tags:
        - macos
    needs: [download:macos]
    script:
        - mkdir -p macos/octave
        - cp -r +gams macos/octave
        - cd macos/octave
        - octave --no-gui --no-window-system --eval "gams.transfer.setup('../../ext/gdx', '../../ext/zlib', 'verbose', $BUILD_VERBOSITY)"
    only:
        - merge_requests
        - master
    artifacts:
        name: macos:octave
        paths:
            - macos/octave/+gams
        expire_in: 30 min

octave:build:macos_arm:
    stage: octave:build
    tags:
        - macos-arm64
    needs: [download:macos_arm]
    script:
        - mkdir -p macos_arm/octave
        - cp -r +gams macos_arm/octave
        - cd macos_arm/octave
        - octave --no-gui --no-window-system --eval "gams.transfer.setup('../../ext/gdx', '../../ext/zlib', 'verbose', $BUILD_VERBOSITY)"
    only:
        - merge_requests
        - master
    artifacts:
        name: macos_arm:octave
        paths:
            - macos_arm/octave/+gams
        expire_in: 30 min

matlab:build:linux:
    stage: matlab:build
    tags:
        - linux
    image:
        name: $CI_REGISTRY_IMAGE/linux/builder
    needs: [download:linux]
    script:
        - mkdir -p linux/matlab
        - cp -r +gams linux/matlab
        - cd linux/matlab
        - ~/Documents/MATLAB/runmatlab.sh "mex -setup C -v; mex -setup C++ -v; gams.transfer.setup('../../ext/gdx', '../../ext/zlib', 'verbose', $BUILD_VERBOSITY)"
        - nm -o `find -name "*mexa64"` | grep -F GLIBC_2. | grep -v -F 2.2.5 | grep -v -F 2.3.4
    only:
        - merge_requests
        - master
        - tags
    artifacts:
        name: linux:matlab
        paths:
            - linux/matlab/+gams
        expire_in: 30 min

matlab:build:macos:
    stage: matlab:build
    tags:
        - corina
    needs: [download:macos]
    script:
        - mkdir -p macos/matlab
        - cp -r +gams macos/matlab
        - cd macos/matlab
        - matlab -nodisplay -nosplash -nodesktop -r "mex -setup C -v; mex -setup C++ -v; gams.transfer.setup('../../ext/gdx', '../../ext/zlib', 'verbose', $BUILD_VERBOSITY)"
    only:
        - merge_requests
        - master
        - tags
    artifacts:
        name: macos:matlab
        paths:
            - macos/matlab/+gams
        expire_in: 30 min

matlab:build:macos_arm:
    stage: matlab:build
    tags:
        - macos-arm64
        - stan
    needs: [download:macos_arm]
    script:
        - mkdir -p macos_arm/matlab
        - cp -r +gams macos_arm/matlab
        - cd macos_arm/matlab
        - matlab -nodisplay -nosplash -nodesktop -r "mex -setup C -v; mex -setup C++ -v; gams.transfer.setup('../../ext/gdx', '../../ext/zlib', 'verbose', $BUILD_VERBOSITY)"
    only:
        - merge_requests
        - master
        - tags
    artifacts:
        name: macos_arm:matlab
        paths:
            - macos_arm/matlab/+gams
        expire_in: 30 min

matlab:build:windows:
    stage: matlab:build
    tags:
        - windows-shell
    needs: [download:windows]
    script:
        - mkdir -p windows/matlab
        - cp -r +gams windows/matlab
        - cd windows/matlab
        - matlab.exe -batch "mex -setup C -v; mex -setup C++ -v; gams.transfer.setup('../../ext/gdx', '../../ext/zlib', 'verbose', $BUILD_VERBOSITY)"
    only:
        - merge_requests
        - master
        - tags
    artifacts:
        name: windows:matlab
        paths:
            - windows/matlab/+gams
        expire_in: 30 min

octave:test:linux:
    stage: octave:test
    tags:
        - linux
    image:
        name: $CI_REGISTRY_IMAGE/linux/builder
    needs: [download:linux, octave:build:linux]
    before_script:
        - PATH=$PWD/linux/gdx:$PATH
    script:
        - octave --no-gui --no-window-system --path $PWD/test --eval "run_tests('linux/octave', 'working_dir', 'unittest', 'exit_on_fail', true)"
    only:
        - merge_requests
        - master

octave:test:macos:
    stage: octave:test
    tags:
        - macos
    needs: [download:macos, octave:build:macos]
    before_script:
        - PATH=$PWD/macos/gdx:$PATH
    script:
        - octave --no-gui --no-window-system --path $PWD/test --eval "run_tests('macos/octave', 'working_dir', 'unittest', 'exit_on_fail', true)"
    only:
        - merge_requests
        - master

octave:test:macos_arm:
    stage: octave:test
    tags:
        - macos-arm64
    needs: [download:macos_arm, octave:build:macos_arm]
    before_script:
        - PATH=$PWD/macos_arm/gdx:$PATH
    script:
        - octave --no-gui --no-window-system --path $PWD/test --eval "run_tests('macos_arm/octave', 'working_dir', 'unittest', 'exit_on_fail', true)"
    only:
        - merge_requests
        - master

matlab:test:linux:
    stage: matlab:test
    tags:
        - linux
    image:
        name: $CI_REGISTRY_IMAGE/linux/builder
    needs: [download:linux, matlab:build:linux]
    before_script:
        - PATH=$PWD/linux/gdx:$PATH
    script:
        - ~/Documents/MATLAB/runmatlab.sh "addpath('test'); run_tests('linux/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
        # - export GAMS_TRANSFER_MATLAB_SUPPORTS_CATEGORICAL=false
        # - export GAMS_TRANSFER_MATLAB_SUPPORTS_TABLE=true
        # - ~/Documents/MATLAB/runmatlab.sh "addpath('test'); run_tests('linux/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
        # - export GAMS_TRANSFER_MATLAB_SUPPORTS_CATEGORICAL=true
        # - export GAMS_TRANSFER_MATLAB_SUPPORTS_TABLE=false
        # - ~/Documents/MATLAB/runmatlab.sh "addpath('test'); run_tests('linux/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
        # - export GAMS_TRANSFER_MATLAB_SUPPORTS_CATEGORICAL=false
        # - export GAMS_TRANSFER_MATLAB_SUPPORTS_TABLE=false
        # - ~/Documents/MATLAB/runmatlab.sh "addpath('test'); run_tests('linux/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
    only:
        - merge_requests
        - master

matlab:test:macos:
    stage: matlab:test
    tags:
        - corina
    needs: [download:macos, matlab:build:macos]
    before_script:
        - PATH=$PWD/macos/gdx:$PATH
    script:
        - matlab -batch "addpath('test'); run_tests('macos/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
        - export GAMS_TRANSFER_MATLAB_SUPPORTS_CATEGORICAL=false
        - export GAMS_TRANSFER_MATLAB_SUPPORTS_TABLE=true
        - matlab -batch "addpath('test'); run_tests('macos/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
        - export GAMS_TRANSFER_MATLAB_SUPPORTS_CATEGORICAL=true
        - export GAMS_TRANSFER_MATLAB_SUPPORTS_TABLE=false
        - matlab -batch "addpath('test'); run_tests('macos/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
        - export GAMS_TRANSFER_MATLAB_SUPPORTS_CATEGORICAL=false
        - export GAMS_TRANSFER_MATLAB_SUPPORTS_TABLE=false
        - matlab -batch "addpath('test'); run_tests('macos/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
    only:
        - merge_requests
        - master

matlab:test:macos_arm:
    stage: matlab:test
    tags:
        - macos-arm64
        - stan
    needs: [download:macos_arm, matlab:build:macos_arm]
    before_script:
        - PATH=$PWD/macos_arm/gdx:$PATH
    script:
        - matlab -batch "addpath('test'); run_tests('macos_arm/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
        - export GAMS_TRANSFER_MATLAB_SUPPORTS_CATEGORICAL=false
        - export GAMS_TRANSFER_MATLAB_SUPPORTS_TABLE=true
        - matlab -batch "addpath('test'); run_tests('macos_arm/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
        - export GAMS_TRANSFER_MATLAB_SUPPORTS_CATEGORICAL=true
        - export GAMS_TRANSFER_MATLAB_SUPPORTS_TABLE=false
        - matlab -batch "addpath('test'); run_tests('macos_arm/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
        - export GAMS_TRANSFER_MATLAB_SUPPORTS_CATEGORICAL=false
        - export GAMS_TRANSFER_MATLAB_SUPPORTS_TABLE=false
        - matlab -batch "addpath('test'); run_tests('macos_arm/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
    only:
        - merge_requests
        - master

matlab:test:windows:
    stage: matlab:test
    tags:
        - windows-shell
    needs: [download:windows, matlab:build:windows]
    before_script:
        - $env:Path = "$pwd/windows/gdx;" + $env:Path
    script:
        - matlab.exe -batch "addpath('test'); run_tests('windows/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
        - $env:GAMS_TRANSFER_MATLAB_SUPPORTS_CATEGORICAL = 'false'
        - $env:GAMS_TRANSFER_MATLAB_SUPPORTS_TABLE = 'true'
        - matlab.exe -batch "addpath('test'); run_tests('windows/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
        - $env:GAMS_TRANSFER_MATLAB_SUPPORTS_CATEGORICAL = 'true'
        - $env:GAMS_TRANSFER_MATLAB_SUPPORTS_TABLE = 'false'
        - matlab.exe -batch "addpath('test'); run_tests('windows/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
        - $env:GAMS_TRANSFER_MATLAB_SUPPORTS_CATEGORICAL = 'false'
        - $env:GAMS_TRANSFER_MATLAB_SUPPORTS_TABLE = 'false'
        - matlab.exe -batch "addpath('test'); run_tests('windows/matlab', 'working_dir', 'unittest', 'exit_on_fail', true)"
    only:
        - merge_requests
        - master

package:
    stage: package
    tags:
        - linux
    image:
        name: $CI_REGISTRY_IMAGE/linux/builder
    script:
        - |
            for d in linux macos macos_arm windows
            do
                cd $d/matlab
                sudo zip -r gams_transfer_matlab_$d.zip +gams
                cd ../..
                mv $d/matlab/gams_transfer_matlab_$d.zip .
            done
    artifacts:
        name: release
        paths:
            - gams_transfer_matlab_linux.zip
            - gams_transfer_matlab_macos.zip
            - gams_transfer_matlab_macos_arm.zip
            - gams_transfer_matlab_windows.zip
        expire_in: 30 min
    only:
        - tags

deploy:gitlab:
    stage: deploy
    tags:
        - linux
    image:
        name: $CI_REGISTRY_IMAGE/linux/builder
    script:
        - |
            for fn in gams_transfer_matlab_linux.zip gams_transfer_matlab_macos.zip gams_transfer_matlab_macos_arm.zip gams_transfer_matlab_windows.zip
            do
                curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file $fn ${PACKAGE_REGISTRY_URL}
            done
        - DESCR=$(grep -Pzo "(?s)GAMS Transfer Matlab $CI_COMMIT_TAG.*?((?=\nGAMS Transfer Matlab v)|$)" CHANGELOG.md | tr -d '\0')
        - DESCR=$(sed 1,2d <<< "$DESCR")
        - |
            release-cli create \
                --name "Release $CI_COMMIT_TAG" \
                --tag-name $CI_COMMIT_TAG \
                --description "$DESCR" \
                --assets-link "{\"name\":\"gams_transfer_matlab_linux.zip\",\"url\":\"${PACKAGE_REGISTRY_URL}gams_transfer_matlab_linux.zip\"}" \
                --assets-link "{\"name\":\"gams_transfer_matlab_macos.zip\",\"url\":\"${PACKAGE_REGISTRY_URL}gams_transfer_matlab_macos.zip\"}" \
                --assets-link "{\"name\":\"gams_transfer_matlab_macos_arm.zip\",\"url\":\"${PACKAGE_REGISTRY_URL}gams_transfer_matlab_macos_arm.zip\"}" \
                --assets-link "{\"name\":\"gams_transfer_matlab_windows.zip\",\"url\":\"${PACKAGE_REGISTRY_URL}gams_transfer_matlab_windows.zip\"}"
        - mv build/doc/html public/
    artifacts:
        paths:
            - public
    only:
        - tags

deploy:github:
    stage: deploy
    tags:
        - linux
    image:
        name: $CI_REGISTRY_IMAGE/linux/builder
    before_script:
        - PATH="/opt/github-release:${PATH}"
    script:
        - DESCR=$(grep -Pzo "(?s)GAMS Transfer Matlab $CI_COMMIT_TAG.*?((?=\nGAMS Transfer Matlab v)|$)" CHANGELOG.md | tr -d '\0')
        - DESCR=$(sed 1,2d <<< "$DESCR")
        - |
            GITHUB_TOKEN=${GITHUB_TOKEN} \
                github-release \
                -v release \
                -u GAMS-dev \
                -r transfer-matlab \
                -t "${CI_COMMIT_TAG}" \
                -d "${DESCR}" \
                -n "GAMS Transfer Matlab ${CI_COMMIT_TAG}"
        - sleep 10s # make sure the release is available to reference
        - |
            for fn in gams_transfer_matlab_linux.zip gams_transfer_matlab_macos.zip gams_transfer_matlab_macos_arm.zip gams_transfer_matlab_windows.zip
            do
                GITHUB_TOKEN=${GITHUB_TOKEN} \
                    github-release \
                    -v upload -R \
                    -u GAMS-dev \
                    -r transfer-matlab \
                    -t "${CI_COMMIT_TAG}" \
                    -n $fn -f $fn
            done
    only:
        - tags
