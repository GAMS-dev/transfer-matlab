/** \page GAMS_TRANSFER_MATLAB_RECORDS Records

\tableofcontents

Symbol records are the actual data. In GAMS Transfer Matlab they are stored in Matlab native data
structures: structs, tables, dense or sparse matrices (see \ref GAMS_TRANSFER_MATLAB_RECORDS_FORMAT
for more information). In GDX, a record is the combination of domain entry data and value data.
Domain entries are given as \ref GAMS_TRANSFER_MATLAB_RECORDS_UELS "UELs". The values a \ref
GAMS_TRANSFER_MATLAB_SYMBOLS "symbol" stores per record depends on the symbol type. \ref
gams::transfer::symbol::Set "Sets" have `element_text`, \ref gams::transfer::symbol::Parameter
"Parameters" have `value` and \ref gams::transfer::symbol::Equation "Equations" and \ref
gams::transfer::symbol::Variable "Variables" have `level`, `marginal`, `lower`, `upper` and `scale`.
If some of these value fields are not provided, then default values are used. A \ref
GAMS_TRANSFER_MATLAB_RECORDS_FORMAT "record format" is chosen for each symbol and not for each of
these values independently. Hence note, a \ref GAMS_TRANSFER_MATLAB_CONTAINER "container" can store
different symbols with different \ref GAMS_TRANSFER_MATLAB_RECORDS_FORMAT "record formats".

When working with symbol records, there are two things that can go wrong:
- \par Record data does not satisfy the chosen format.
  \parblock
  Simply ask whats wrong with \ref gams::transfer::symbol::Abstract::isValid
  "symbol.Abstract.isValid", see \ref GAMS_TRANSFER_MATLAB_RECORDS_VALIDATE.
  \endparblock
- \par Record data contains invalid domain entries, so called domain violations.
  \parblock
  Simply ask for domain violations with symbol.Abstract.[has|count|get|find]DomainViolations, see
  \ref GAMS_TRANSFER_MATLAB_RECORDS_DOMVIOL.
  \endparblock

\section GAMS_TRANSFER_MATLAB_RECORDS_FORMAT Records Format

GAMS Transfer Matlab can read and maintain the symbol records in four different formats: `struct`,
`table`, `dense_matrix` and `sparse_matrix`. Both `struct` and `table` are table-like formats and
the `dense_matrix` and `sparse_matrix` -- obviously -- matrix-like formats. The default is `table`
as it allows for a good data display and overview. However note that `table` is not the most
efficient format.

- \par Table-Like Formats:
  \parblock
  The formats `table` and `struct` store the domain entries in the first \ref
  gams::transfer::symbol::Abstract::dimension "dimension" columns followed by value columns
  (`element_text` for \ref gams::transfer::symbol::Set "Set", `value` for \ref
  gams::transfer::symbol::Parameter "Parameter" and `level`, `marginal`, `lower`, `upper`, `scale`
  for \ref gams::transfer::symbol::Variable "Variable" and \ref gams::transfer::symbol::Equation
  "Equation") and the records as rows. In case of `struct`, the columns are given as struct fields.
  The column names for domain entry columns can be shown and altered by \ref
  gams::transfer::symbol::Abstract::domain_labels "symbol.Abstract.domain_labels".

  For example, `x` in \ref GAMS_TRANSFER_MATLAB_GETSTARTED_EXAMPLE as `table`:
```
>> x.records
ans =
  6×7 table
        i           j        level    marginal    lower    upper    scale
    _________    ________    _____    ________    _____    _____    _____
    seattle      new-york      50          0        0       Inf       1
    seattle      chicago      300          0        0       Inf       1
    seattle      topeka         0      0.036        0       Inf       1
    san-diego    new-york     275          0        0       Inf       1
    san-diego    chicago        0      0.009        0       Inf       1
    san-diego    topeka       275          0        0       Inf       1
```
  For example, `x` in \ref GAMS_TRANSFER_MATLAB_GETSTARTED_EXAMPLE as `struct`:
```
>> x.records
ans =
  struct with fields:
           i: [6×1 categorical]
           j: [6×1 categorical]
       level: [6×1 double]
    marginal: [6×1 double]
       lower: [6×1 double]
       upper: [6×1 double]
       scale: [6×1 double]
>> x.records.level
ans =
    50
   300
     0
   275
     0
   275
```
  \note \ref gams::transfer::symbol::Set "Sets" can only be maintained in table-like
  formats `struct` and `table`.
  \endparblock
- \par Matrix-Like Formats:
  \parblock
  The formats `dense_matrix` and `sparse_matrix` store the record values individually as matrices
  with dimension `max(2,d)`, where `d` is the symbol \ref
  gams::transfer::symbol::Abstract::dimension "dimension", and shape \ref
  gams::transfer::symbol::Abstract::size "size". If \ref gams::transfer::symbol::Abstract::size
  "size" is undefined (see \ref GAMS_TRANSFER_MATLAB_SYMBOL_DOMAIN), a matrix-like format is not
  possible. Domain entries cannot be stored in the matrix, but can be queried using the symbol
  method \ref gams::transfer::symbol::Abstract::getUELs "getUELs" (see also \ref
  GAMS_TRANSFER_MATLAB_RECORDS_UELS). Assume a symbol `s` has two dimensions. Then, a `(row,col)`
  matrix entry corresponds to the domain entry `s.getUELs(1, [row, col])`. The logic is analogue for
  different dimensions.

  For example, `x` in \ref GAMS_TRANSFER_MATLAB_GETSTARTED_EXAMPLE as `dense_matrix`:
```
>> x.records
ans =
  struct with fields:
       level: [2×3 double]
    marginal: [2×3 double]
       lower: [2×3 double]
       upper: [2×3 double]
       scale: [2×3 double]
>> x.records.level
ans =
    50   300     0
   275     0   275
```
  For example, `x` in \ref GAMS_TRANSFER_MATLAB_GETSTARTED_EXAMPLE as `sparse_matrix`:
```
>> x.records
ans =
  struct with fields:
       level: [2×3 double]
    marginal: [2×3 double]
       lower: [2×3 double]
       upper: [2×3 double]
       scale: [2×3 double]
>> x.records.level
ans =
   (1,1)       50
   (2,1)      275
   (1,2)      300
   (2,3)      275
```
  In order to get the domain entries for matrix elements, note that in the above
  examples the following holds:
```
x.getUELs(1, 1:2) equals {'seattle', 'san-diego'}
x.getUELs(2, 1:3) equals {'new-york', 'chicago', 'topeka'}
```
  \endparblock

\note For scalar symbols (\ref gams::transfer::symbol::Abstract::dimension "dimension" equals 0),
the formats `struct` and `dense_matrix` are equivalent.

Each format has its advantages and disadvantages, see the following table. There, ratings are `++`
(very good), `+`, `o`, `-`, `--` (rather bad), rated relatively for each category.

| Record Format | Max Dimension | Efficiency | Memory (General) | Memory (Dense Data) | Display |
|:--------------|:--------------|:-----------|:-----------------|:--------------------|:--------|
| `struct`        | 20 (GAMS limit)  | `++` | `+`  | `-`  | `-`  |
| `table`         | 20 (GAMS limit)  | `--` | `o`  | `--` | `++` |
| `dense_matrix`  | 20 (GAMS limit)  | `+`  | `--` | `++` | `-`  |
| `sparse_matrix` | 2 (Matlab limit) | `o`  | `++` | `+`  | `--` |

The possibilities to chose or change a record format are:
- Specify the format when \ref GAMS_TRANSFER_MATLAB_CONTAINER_READ "reading from GDX".
- Let GAMS Transfer Matlab choose the record format based on the data provided to \ref
  gams::transfer::symbol::Abstract::setRecords "symbol.Abstract.setRecords".
- Transform the records to a different format using \ref
  gams::transfer::symbol::Abstract::transformRecords "symbol.Abstract.transformRecords".
- Change the record format (without transforming the records) using the property \ref
  gams::transfer::symbol::Abstract::format "symbol.Abstract.format".

\section GAMS_TRANSFER_MATLAB_RECORDS_VALIDATE Validate Symbol Records

GAMS Transfer Matlab requires the symbol records to be stored in one of the supported \ref
GAMS_TRANSFER_MATLAB_RECORDS_FORMAT "record formats" in order to understand and write them to GDX.
However, it can easily happen that a certain criteria of the format is not met and the symbol is
marked as invalid, i.e., the symbol method \ref gams::transfer::symbol::Abstract::isValid
"symbol.Abstract.isValid" returns `false`. In that case setting the argument `verbose` of \ref
gams::transfer::symbol::Abstract::isValid "symbol.Abstract.isValid" to `true` will print the reason
for invalidity and can thus help to resolve the issue.

For example, take `x` of \ref GAMS_TRANSFER_MATLAB_GETSTARTED_EXAMPLE, which is of course valid:
```
>> x.transformRecords('struct');
>> x.isValid(true)

ans =

  logical

   1
```
Let's invalidate this symbol by storing it in an incorrect shape:
```
>> x.records.level = transpose(x.records.level);
>> x.isValid(true)
Warning: Records value column 'level' must be column vector.
> In gams.transfer.symbol/Abstract/isValid (line 912)

ans =

  logical

   0
```

\section GAMS_TRANSFER_MATLAB_RECORDS_UELS Unique Elements (UELs)

A Unique ELement (UEL) is an `(i,s)` pair where `i` is an identification number (or index) for a
(string) label `s`. GDX uses UELs to efficiently store domain entries of a record by storing the UEL
index `i` of a domain entry instead of the actual string `s`. This avoids storing the same string
multiple times. The concept of UELs also exists in Matlab and is called a `categorical`. If you are
new to `categorical`: Work with `categorical` as you would work with strings -- it's just a way to
save memory. Converting a `categorical` to `uint64` (or similar) reveals the identification number.
In GAMS Transfer Matlab you can specify the identification numbers either by `categorical` (usually
default) or by providing the numbers directly.

\note `categorical` will trim the strings and hence prefixed or trailing whitespaces are not
supported. In case of reading a GDX file with those, GAMS Transfer Maltab will use identification
numbers instead.

For example, note the `categorical` in `x` of \ref GAMS_TRANSFER_MATLAB_GETSTARTED_EXAMPLE
```
>> transpose(x.records.i)

ans =

  1×6 categorical array

     seattle      seattle      seattle      san-diego      san-diego      san-diego

>> transpose(x.records.j)

ans =

  1×6 categorical array

     new-york      chicago      topeka      new-york      chicago      topeka

>> transpose(int64(x.records.i))

ans =

     1     1     1     2     2     2

>> transpose(int64(x.records.j))

ans =

  1×6 int64 row vector

   1   2   3   1   2   3
```

@attention In the very unlikely case that your Matlab (or Octave) version does NOT support
`categorical` (Matlab earlier than R2013b or any Octave version), please go on and read carefully
about UELs. You must store the UEL indices in the domain columns of the \ref
gams::transfer::symbol::Abstract::records "symbol.Abstract.records". Storing strings is not supported. For
looking up the corresponding string, use the method \ref gams::transfer::symbol::Abstract::getUELs
"symbol.Abstract.getUELs". Otherwise, if you can use `categorical` -- very likely --, you won't need the \ref
gams::transfer::symbol::Abstract "Symbol" methods regarding adding or modifying UELs, explained
below.

Each symbol maintains its own list of UELs per dimension, which can be accessed and modified via the
methods \ref gams::transfer::symbol::Abstract::getUELs "symbol.Abstract.getUELs", \ref
gams::transfer::symbol::Abstract::setUELs "symbol.Abstract.setUELs", \ref
gams::transfer::symbol::Abstract::addUELs "symbol.Abstract.addUELs", \ref
gams::transfer::symbol::Abstract::removeUELs "symbol.Abstract.removeUELs", \ref
gams::transfer::symbol::Abstract::renameUELs "symbol.Abstract.renameUELs" and \ref
gams::transfer::symbol::Abstract::reorderUELs "symbol.Abstract.reorderUELs" (or the Matlab functions for
modifying `categorical` directly). The UEL indices are numbered from 1 to the number of UELs stored
independently for each dimension.

\attention The methods \ref gams::transfer::symbol::Abstract::setUELs "symbol.Abstract.setUELs" and \ref
gams::transfer::symbol::Abstract::removeUELs "symbol.Abstract.removeUELs" may reassign different UEL indices
to the UEL labels. These changes are applied to the indices used in \ref
gams::transfer::symbol::Abstract::records "symbol.Abstract.records". This implies that removing a UEL that is
used in the \ref gams::transfer::symbol::Abstract::records "symbol.Abstract.records" will then lead to an
invalid domain entry (displayed as `<undefined>` in Matlab). For \ref
gams::transfer::symbol::Abstract::setUELs "symbol.Abstract.setUELs", these updates can be disabled by passing
the arguments `'rename', true`.

For example, continuing the \ref GAMS_TRANSFER_MATLAB_GETSTARTED_EXAMPLE from
above, the UELs are:
```
>> transpose(x.getUELs(1))

ans =

  1×2 cell array

    {'seattle'}    {'san-diego'}

>> transpose(x.getUELs(2))

ans =

  1×3 cell array

    {'new-york'}    {'chicago'}    {'topeka'}
```
Changing these can invalidate some records:
```
>> x.setUELs({'madison', 'new-york', 'seattle'}, 1);
>> categories(x.records.i)

ans =

  3×1 cell array

    {'madison' }
    {'new-york'}
    {'seattle' }

>> transpose(x.records.i)

ans =

  1×6 categorical array

     seattle      seattle      seattle      <undefined>      <undefined>      <undefined>
```

\par Advanced Users Only:
\parblock
Even with support of `categorical` it can be useful to explicitly add a UEL with \ref
gams::transfer::symbol::Abstract::addUELs "symbol.Abstract.addUELs", although simply using a new UEL in \ref
gams::transfer::symbol::Abstract::records "symbol.Abstract.records" will add it automatically to the UEL
list. However, it is possible to store more UELs than those actually used in the \ref
gams::transfer::symbol::Abstract::records "records". Advanced users can use this fact to sort the
universe set of a GDX file to their needs, see also \ref GAMS_TRANSFER_MATLAB_CONTAINER_WRITE.
\endparblock

\section GAMS_TRANSFER_MATLAB_RECORDS_DOMVIOL Domain Violations

Domain violations occur when a symbol uses other \ref gams::transfer::symbol::Set "Sets" as \ref
gams::transfer::symbol::Abstract::domain "domain"(s) -- and is thus of domain type `regular`, see
\ref GAMS_TRANSFER_MATLAB_SYMBOL_DOMAIN -- and uses a domain entry in its \ref
gams::transfer::symbol::Abstract::records "records" that is not present in the corresponding
referenced domain set. Such a domain violation will lead to a GDX error when writing the data!

\note Checking for domain violations is not part of \ref gams::transfer::symbol::Abstract::isValid
"symbol.Abstract.isValid" for performance reasons.

For example, altering `x` in \ref GAMS_TRANSFER_MATLAB_GETSTARTED_EXAMPLE -- remember that `x` has
domains `{i,j}`, where `i` and `j` are \ref gams::transfer::symbol::Set "Sets" and `madison` is not
part of set `i` -- as follows:
```
>> x.records.i(end) = "madison";
```
doesn't update the domain set `i`:
```
>> i.records.uni'

ans =

  1×2 categorical array

     seattle      san-diego
```
Trying to write this to a GDX file will fail:
```
>> m.write();
Error using gt_gdx_write
GDX error in record x(madison,topeka): Domain violation

Error in gams.transfer.Container/write (line 341)
                gams.transfer.gt_gdx_write(obj.system_directory, filename, obj.data, ...
```

To ask for domain violations, call the method \ref
gams::transfer::symbol::Abstract::getDomainViolations "symbol.Abstract.getDomainViolations". It returns a
list of \ref gams::transfer::symbol::domain::Violation "DomainViolation" objects w.r.t. each
dimension of the symbol which can then be used to resolve the domain violations: The GAMS Transfer
Matlab methods \ref gams::transfer::symbol::Abstract::resolveDomainViolations
"symbol.Abstract.resolveDomainViolations" and \ref gams::transfer::symbol::domain::Violation::resolve
"DomainViolation.resolve" offer an automatic expansion of the domain sets with the violated entries
in order to eliminate domain violations.

For example, continuing the example from above,
```
>> dv = x.getDomainViolations();
```
shows the domain violation:
```
>> dv{1}

ans =

  Violation with properties:

        symbol: [1x1 gams.transfer.symbol.Variable]
     dimension: 1
    violations: {'madison'}
```
Calling either of the following
```
>> x.resolveDomainViolations();
>> dv{1}.resolve();
```
resolves it:
```
>> dv = x.getDomainViolations()

dv =

  0×0 empty cell array

>> i.records.uni'

ans =

  1×3 categorical array

     seattle      san-diego      madison
```

This resolving feature can further be triggered automatically by setting the symbol property \ref
gams::transfer::symbol::Abstract::domain_forwarding "symbol.Abstract.domain_forwarding" to `true`.
If \ref gams::transfer::symbol::Abstract::records "records" are updated by direct access (see \ref
GAMS_TRANSFER_MATLAB_SYMBOL_RECORDS), the domain update will happen delayed for improved efficiency,
but can be forced by calling \ref gams::transfer::symbol::Abstract::isValid "isValid" or the
resolving methods mentioned above.

\note The method for automatically resolving the domain violations can be convenient, but it
effectively disables domain checking, which is a valuable tool for error detection. We encourage to
use \ref gams::transfer::symbol::Abstract::resolveDomainViolations
"symbol.Abstract.resolveDomainViolations", \ref gams::transfer::symbol::domain::Violation::resolve
"DomainViolation.resolve" or \ref gams::transfer::symbol::Abstract::domain_forwarding
"symbol.Abstract.domain_forwarding" enabled as rarely as possible. The same holds for using
`relaxed` domain information when `regular` domain information would be possible, see \ref
GAMS_TRANSFER_MATLAB_SYMBOL_DOMAIN.

*/
